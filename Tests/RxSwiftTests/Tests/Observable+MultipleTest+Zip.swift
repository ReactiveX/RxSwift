// This file is autogenerated. Take a look at `Preprocessor` target in RxSwift project 
//
//  Observable+MultipleTest+Zip.swift
//  RxTests
//
//  Created by Krunoslav Zaher on 5/23/15.
//  Copyright Â© 2015 Krunoslav Zaher. All rights reserved.
//

import Foundation
import XCTest
import RxSwift
import RxTests

// combine latest
extension ObservableMultipleTest {


    // 2

    func testZip_ImmediateSchedule2() {
        
        let v0: Observable<Int> = Observable.just(1)
        let v1: Observable<Int> = Observable.just(2)

        var result: Int! = nil

        let _ = Observable.zip(v0, v1) { (a0: Int, a1: Int) -> Int in a0 + a1 }
            .subscribeNext { (x: Int) -> Void in result = x }

        XCTAssertEqual(result, 3)
    }

    func testZip_Never2() {
        let scheduler = TestScheduler(initialClock: 0)

        
        let e0 = scheduler.createHotObservable([
            next(150, 1)
        ])
        
        let e1 = scheduler.createHotObservable([
            next(150, 1)
        ])
        

        let res = scheduler.start { () -> Observable<Int> in
            let result: Observable<Int> = Observable.zip(e0, e1) { (_, _) -> Int in
                return (42)
            }

            return result
        }

        XCTAssertEqual(res.events, [])

        let subscriptions = [Subscription(200, 1000)]


        XCTAssertEqual(e0.subscriptions, subscriptions)
        XCTAssertEqual(e1.subscriptions, subscriptions)
    }

    func testZip_Empty2() {
        let scheduler = TestScheduler(initialClock: 0)

        
        let e0: TestableObservable<Int> = scheduler.createHotObservable([
            completed(210)
        ])
        
        let e1: TestableObservable<Int> = scheduler.createHotObservable([
            completed(220)
        ])
        

        let res = scheduler.start { () -> Observable<Int> in
            let result: Observable<Int> = Observable.zip(e0, e1) { (_, _) -> Int in
                return (42)
            }

            return result
        }

        XCTAssertEqual(res.events, [
            completed(220)
        ])


        XCTAssertEqual(e0.subscriptions, [Subscription(200, 210)])
        XCTAssertEqual(e1.subscriptions, [Subscription(200, 220)])
    }

    func testZip_SymmetricReturn2() {
        let scheduler = TestScheduler(initialClock: 0)

        
        let e0: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
            next(210, 1),
            completed(400)
        ])
        
        let e1: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
            next(220, 2),
            completed(400)
        ])
        

        let res = scheduler.start { () -> Observable<Int> in
            let result: Observable<Int> = Observable.zip(e0, e1) { (_0, _1) -> Int in
                return (_0 + _1)
            }

            return result
        }

        XCTAssertEqual(res.events, [
            next(220, 3),
            completed(400)
        ])


        XCTAssertEqual(e0.subscriptions, [Subscription(200, 400)])
        XCTAssertEqual(e1.subscriptions, [Subscription(200, 400)])
    }

    func testZip_AllCompleted2() {
        let scheduler = TestScheduler(initialClock: 0)

        
        let e0: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
 
            next(210, 5),
            completed(220)
        ])
        
        let e1: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
 
            next(210, 5), 
            next(220, 6),
            completed(230)
        ])
        

        let res = scheduler.start { () -> Observable<Int> in
            let result: Observable<Int> = Observable.zip(e0, e1) { (_0, _1) -> Int in
                return (_0 + _1)
            }

            return result
        }

        XCTAssertEqual(res.events, [
            next(210, 10),
            completed(220)
        ])


        XCTAssertEqual(e0.subscriptions, [Subscription(200, 220)])
        XCTAssertEqual(e1.subscriptions, [Subscription(200, 220)])
    }



    

    // 3

    func testZip_ImmediateSchedule3() {
        
        let v0: Observable<Int> = Observable.just(1)
        let v1: Observable<Int> = Observable.just(2)
        let v2: Observable<Int> = Observable.just(3)

        var result: Int! = nil

        let _ = Observable.zip(v0, v1, v2) { (a0: Int, a1: Int, a2: Int) -> Int in a0 + a1 + a2 }
            .subscribeNext { (x: Int) -> Void in result = x }

        XCTAssertEqual(result, 6)
    }

    func testZip_Never3() {
        let scheduler = TestScheduler(initialClock: 0)

        
        let e0 = scheduler.createHotObservable([
            next(150, 1)
        ])
        
        let e1 = scheduler.createHotObservable([
            next(150, 1)
        ])
        
        let e2 = scheduler.createHotObservable([
            next(150, 1)
        ])
        

        let res = scheduler.start { () -> Observable<Int> in
            let result: Observable<Int> = Observable.zip(e0, e1, e2) { (_, _, _) -> Int in
                return (42)
            }

            return result
        }

        XCTAssertEqual(res.events, [])

        let subscriptions = [Subscription(200, 1000)]


        XCTAssertEqual(e0.subscriptions, subscriptions)
        XCTAssertEqual(e1.subscriptions, subscriptions)
        XCTAssertEqual(e2.subscriptions, subscriptions)
    }

    func testZip_Empty3() {
        let scheduler = TestScheduler(initialClock: 0)

        
        let e0: TestableObservable<Int> = scheduler.createHotObservable([
            completed(210)
        ])
        
        let e1: TestableObservable<Int> = scheduler.createHotObservable([
            completed(220)
        ])
        
        let e2: TestableObservable<Int> = scheduler.createHotObservable([
            completed(230)
        ])
        

        let res = scheduler.start { () -> Observable<Int> in
            let result: Observable<Int> = Observable.zip(e0, e1, e2) { (_, _, _) -> Int in
                return (42)
            }

            return result
        }

        XCTAssertEqual(res.events, [
            completed(230)
        ])


        XCTAssertEqual(e0.subscriptions, [Subscription(200, 210)])
        XCTAssertEqual(e1.subscriptions, [Subscription(200, 220)])
        XCTAssertEqual(e2.subscriptions, [Subscription(200, 230)])
    }

    func testZip_SymmetricReturn3() {
        let scheduler = TestScheduler(initialClock: 0)

        
        let e0: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
            next(210, 1),
            completed(400)
        ])
        
        let e1: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
            next(220, 2),
            completed(400)
        ])
        
        let e2: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
            next(230, 3),
            completed(400)
        ])
        

        let res = scheduler.start { () -> Observable<Int> in
            let result: Observable<Int> = Observable.zip(e0, e1, e2) { (_0, _1, _2) -> Int in
                return (_0 + _1 + _2)
            }

            return result
        }

        XCTAssertEqual(res.events, [
            next(230, 6),
            completed(400)
        ])


        XCTAssertEqual(e0.subscriptions, [Subscription(200, 400)])
        XCTAssertEqual(e1.subscriptions, [Subscription(200, 400)])
        XCTAssertEqual(e2.subscriptions, [Subscription(200, 400)])
    }

    func testZip_AllCompleted3() {
        let scheduler = TestScheduler(initialClock: 0)

        
        let e0: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
 
            next(210, 5),
            completed(220)
        ])
        
        let e1: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
 
            next(210, 5), 
            next(220, 6),
            completed(230)
        ])
        
        let e2: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
 
            next(210, 5), 
            next(220, 6), 
            next(230, 7),
            completed(240)
        ])
        

        let res = scheduler.start { () -> Observable<Int> in
            let result: Observable<Int> = Observable.zip(e0, e1, e2) { (_0, _1, _2) -> Int in
                return (_0 + _1 + _2)
            }

            return result
        }

        XCTAssertEqual(res.events, [
            next(210, 15),
            completed(230)
        ])


        XCTAssertEqual(e0.subscriptions, [Subscription(200, 220)])
        XCTAssertEqual(e1.subscriptions, [Subscription(200, 230)])
        XCTAssertEqual(e2.subscriptions, [Subscription(200, 230)])
    }



    

    // 4

    func testZip_ImmediateSchedule4() {
        
        let v0: Observable<Int> = Observable.just(1)
        let v1: Observable<Int> = Observable.just(2)
        let v2: Observable<Int> = Observable.just(3)
        let v3: Observable<Int> = Observable.just(4)

        var result: Int! = nil

        let _ = Observable.zip(v0, v1, v2, v3) { (a0: Int, a1: Int, a2: Int, a3: Int) -> Int in a0 + a1 + a2 + a3 }
            .subscribeNext { (x: Int) -> Void in result = x }

        XCTAssertEqual(result, 10)
    }

    func testZip_Never4() {
        let scheduler = TestScheduler(initialClock: 0)

        
        let e0 = scheduler.createHotObservable([
            next(150, 1)
        ])
        
        let e1 = scheduler.createHotObservable([
            next(150, 1)
        ])
        
        let e2 = scheduler.createHotObservable([
            next(150, 1)
        ])
        
        let e3 = scheduler.createHotObservable([
            next(150, 1)
        ])
        

        let res = scheduler.start { () -> Observable<Int> in
            let result: Observable<Int> = Observable.zip(e0, e1, e2, e3) { (_, _, _, _) -> Int in
                return (42)
            }

            return result
        }

        XCTAssertEqual(res.events, [])

        let subscriptions = [Subscription(200, 1000)]


        XCTAssertEqual(e0.subscriptions, subscriptions)
        XCTAssertEqual(e1.subscriptions, subscriptions)
        XCTAssertEqual(e2.subscriptions, subscriptions)
        XCTAssertEqual(e3.subscriptions, subscriptions)
    }

    func testZip_Empty4() {
        let scheduler = TestScheduler(initialClock: 0)

        
        let e0: TestableObservable<Int> = scheduler.createHotObservable([
            completed(210)
        ])
        
        let e1: TestableObservable<Int> = scheduler.createHotObservable([
            completed(220)
        ])
        
        let e2: TestableObservable<Int> = scheduler.createHotObservable([
            completed(230)
        ])
        
        let e3: TestableObservable<Int> = scheduler.createHotObservable([
            completed(240)
        ])
        

        let res = scheduler.start { () -> Observable<Int> in
            let result: Observable<Int> = Observable.zip(e0, e1, e2, e3) { (_, _, _, _) -> Int in
                return (42)
            }

            return result
        }

        XCTAssertEqual(res.events, [
            completed(240)
        ])


        XCTAssertEqual(e0.subscriptions, [Subscription(200, 210)])
        XCTAssertEqual(e1.subscriptions, [Subscription(200, 220)])
        XCTAssertEqual(e2.subscriptions, [Subscription(200, 230)])
        XCTAssertEqual(e3.subscriptions, [Subscription(200, 240)])
    }

    func testZip_SymmetricReturn4() {
        let scheduler = TestScheduler(initialClock: 0)

        
        let e0: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
            next(210, 1),
            completed(400)
        ])
        
        let e1: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
            next(220, 2),
            completed(400)
        ])
        
        let e2: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
            next(230, 3),
            completed(400)
        ])
        
        let e3: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
            next(240, 4),
            completed(400)
        ])
        

        let res = scheduler.start { () -> Observable<Int> in
            let result: Observable<Int> = Observable.zip(e0, e1, e2, e3) { (_0, _1, _2, _3) -> Int in
                return (_0 + _1 + _2 + _3)
            }

            return result
        }

        XCTAssertEqual(res.events, [
            next(240, 10),
            completed(400)
        ])


        XCTAssertEqual(e0.subscriptions, [Subscription(200, 400)])
        XCTAssertEqual(e1.subscriptions, [Subscription(200, 400)])
        XCTAssertEqual(e2.subscriptions, [Subscription(200, 400)])
        XCTAssertEqual(e3.subscriptions, [Subscription(200, 400)])
    }

    func testZip_AllCompleted4() {
        let scheduler = TestScheduler(initialClock: 0)

        
        let e0: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
 
            next(210, 5),
            completed(220)
        ])
        
        let e1: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
 
            next(210, 5), 
            next(220, 6),
            completed(230)
        ])
        
        let e2: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
 
            next(210, 5), 
            next(220, 6), 
            next(230, 7),
            completed(240)
        ])
        
        let e3: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
 
            next(210, 5), 
            next(220, 6), 
            next(230, 7), 
            next(240, 8),
            completed(250)
        ])
        

        let res = scheduler.start { () -> Observable<Int> in
            let result: Observable<Int> = Observable.zip(e0, e1, e2, e3) { (_0, _1, _2, _3) -> Int in
                return (_0 + _1 + _2 + _3)
            }

            return result
        }

        XCTAssertEqual(res.events, [
            next(210, 20),
            completed(240)
        ])


        XCTAssertEqual(e0.subscriptions, [Subscription(200, 220)])
        XCTAssertEqual(e1.subscriptions, [Subscription(200, 230)])
        XCTAssertEqual(e2.subscriptions, [Subscription(200, 240)])
        XCTAssertEqual(e3.subscriptions, [Subscription(200, 240)])
    }



    

    // 5

    func testZip_ImmediateSchedule5() {
        
        let v0: Observable<Int> = Observable.just(1)
        let v1: Observable<Int> = Observable.just(2)
        let v2: Observable<Int> = Observable.just(3)
        let v3: Observable<Int> = Observable.just(4)
        let v4: Observable<Int> = Observable.just(5)

        var result: Int! = nil

        let _ = Observable.zip(v0, v1, v2, v3, v4) { (a0: Int, a1: Int, a2: Int, a3: Int, a4: Int) -> Int in a0 + a1 + a2 + a3 + a4 }
            .subscribeNext { (x: Int) -> Void in result = x }

        XCTAssertEqual(result, 15)
    }

    func testZip_Never5() {
        let scheduler = TestScheduler(initialClock: 0)

        
        let e0 = scheduler.createHotObservable([
            next(150, 1)
        ])
        
        let e1 = scheduler.createHotObservable([
            next(150, 1)
        ])
        
        let e2 = scheduler.createHotObservable([
            next(150, 1)
        ])
        
        let e3 = scheduler.createHotObservable([
            next(150, 1)
        ])
        
        let e4 = scheduler.createHotObservable([
            next(150, 1)
        ])
        

        let res = scheduler.start { () -> Observable<Int> in
            let result: Observable<Int> = Observable.zip(e0, e1, e2, e3, e4) { (_, _, _, _, _) -> Int in
                return (42)
            }

            return result
        }

        XCTAssertEqual(res.events, [])

        let subscriptions = [Subscription(200, 1000)]


        XCTAssertEqual(e0.subscriptions, subscriptions)
        XCTAssertEqual(e1.subscriptions, subscriptions)
        XCTAssertEqual(e2.subscriptions, subscriptions)
        XCTAssertEqual(e3.subscriptions, subscriptions)
        XCTAssertEqual(e4.subscriptions, subscriptions)
    }

    func testZip_Empty5() {
        let scheduler = TestScheduler(initialClock: 0)

        
        let e0: TestableObservable<Int> = scheduler.createHotObservable([
            completed(210)
        ])
        
        let e1: TestableObservable<Int> = scheduler.createHotObservable([
            completed(220)
        ])
        
        let e2: TestableObservable<Int> = scheduler.createHotObservable([
            completed(230)
        ])
        
        let e3: TestableObservable<Int> = scheduler.createHotObservable([
            completed(240)
        ])
        
        let e4: TestableObservable<Int> = scheduler.createHotObservable([
            completed(250)
        ])
        

        let res = scheduler.start { () -> Observable<Int> in
            let result: Observable<Int> = Observable.zip(e0, e1, e2, e3, e4) { (_, _, _, _, _) -> Int in
                return (42)
            }

            return result
        }

        XCTAssertEqual(res.events, [
            completed(250)
        ])


        XCTAssertEqual(e0.subscriptions, [Subscription(200, 210)])
        XCTAssertEqual(e1.subscriptions, [Subscription(200, 220)])
        XCTAssertEqual(e2.subscriptions, [Subscription(200, 230)])
        XCTAssertEqual(e3.subscriptions, [Subscription(200, 240)])
        XCTAssertEqual(e4.subscriptions, [Subscription(200, 250)])
    }

    func testZip_SymmetricReturn5() {
        let scheduler = TestScheduler(initialClock: 0)

        
        let e0: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
            next(210, 1),
            completed(400)
        ])
        
        let e1: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
            next(220, 2),
            completed(400)
        ])
        
        let e2: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
            next(230, 3),
            completed(400)
        ])
        
        let e3: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
            next(240, 4),
            completed(400)
        ])
        
        let e4: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
            next(250, 5),
            completed(400)
        ])
        

        let res = scheduler.start { () -> Observable<Int> in
            let result: Observable<Int> = Observable.zip(e0, e1, e2, e3, e4) { (_0, _1, _2, _3, _4) -> Int in
                return (_0 + _1 + _2 + _3 + _4)
            }

            return result
        }

        XCTAssertEqual(res.events, [
            next(250, 15),
            completed(400)
        ])


        XCTAssertEqual(e0.subscriptions, [Subscription(200, 400)])
        XCTAssertEqual(e1.subscriptions, [Subscription(200, 400)])
        XCTAssertEqual(e2.subscriptions, [Subscription(200, 400)])
        XCTAssertEqual(e3.subscriptions, [Subscription(200, 400)])
        XCTAssertEqual(e4.subscriptions, [Subscription(200, 400)])
    }

    func testZip_AllCompleted5() {
        let scheduler = TestScheduler(initialClock: 0)

        
        let e0: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
 
            next(210, 5),
            completed(220)
        ])
        
        let e1: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
 
            next(210, 5), 
            next(220, 6),
            completed(230)
        ])
        
        let e2: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
 
            next(210, 5), 
            next(220, 6), 
            next(230, 7),
            completed(240)
        ])
        
        let e3: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
 
            next(210, 5), 
            next(220, 6), 
            next(230, 7), 
            next(240, 8),
            completed(250)
        ])
        
        let e4: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
 
            next(210, 5), 
            next(220, 6), 
            next(230, 7), 
            next(240, 8), 
            next(250, 9),
            completed(260)
        ])
        

        let res = scheduler.start { () -> Observable<Int> in
            let result: Observable<Int> = Observable.zip(e0, e1, e2, e3, e4) { (_0, _1, _2, _3, _4) -> Int in
                return (_0 + _1 + _2 + _3 + _4)
            }

            return result
        }

        XCTAssertEqual(res.events, [
            next(210, 25),
            completed(250)
        ])


        XCTAssertEqual(e0.subscriptions, [Subscription(200, 220)])
        XCTAssertEqual(e1.subscriptions, [Subscription(200, 230)])
        XCTAssertEqual(e2.subscriptions, [Subscription(200, 240)])
        XCTAssertEqual(e3.subscriptions, [Subscription(200, 250)])
        XCTAssertEqual(e4.subscriptions, [Subscription(200, 250)])
    }



    

    // 6

    func testZip_ImmediateSchedule6() {
        
        let v0: Observable<Int> = Observable.just(1)
        let v1: Observable<Int> = Observable.just(2)
        let v2: Observable<Int> = Observable.just(3)
        let v3: Observable<Int> = Observable.just(4)
        let v4: Observable<Int> = Observable.just(5)
        let v5: Observable<Int> = Observable.just(6)

        var result: Int! = nil

        let _ = Observable.zip(v0, v1, v2, v3, v4, v5) { (a0: Int, a1: Int, a2: Int, a3: Int, a4: Int, a5: Int) -> Int in a0 + a1 + a2 + a3 + a4 + a5 }
            .subscribeNext { (x: Int) -> Void in result = x }

        XCTAssertEqual(result, 21)
    }

    func testZip_Never6() {
        let scheduler = TestScheduler(initialClock: 0)

        
        let e0 = scheduler.createHotObservable([
            next(150, 1)
        ])
        
        let e1 = scheduler.createHotObservable([
            next(150, 1)
        ])
        
        let e2 = scheduler.createHotObservable([
            next(150, 1)
        ])
        
        let e3 = scheduler.createHotObservable([
            next(150, 1)
        ])
        
        let e4 = scheduler.createHotObservable([
            next(150, 1)
        ])
        
        let e5 = scheduler.createHotObservable([
            next(150, 1)
        ])
        

        let res = scheduler.start { () -> Observable<Int> in
            let result: Observable<Int> = Observable.zip(e0, e1, e2, e3, e4, e5) { (_, _, _, _, _, _) -> Int in
                return (42)
            }

            return result
        }

        XCTAssertEqual(res.events, [])

        let subscriptions = [Subscription(200, 1000)]


        XCTAssertEqual(e0.subscriptions, subscriptions)
        XCTAssertEqual(e1.subscriptions, subscriptions)
        XCTAssertEqual(e2.subscriptions, subscriptions)
        XCTAssertEqual(e3.subscriptions, subscriptions)
        XCTAssertEqual(e4.subscriptions, subscriptions)
        XCTAssertEqual(e5.subscriptions, subscriptions)
    }

    func testZip_Empty6() {
        let scheduler = TestScheduler(initialClock: 0)

        
        let e0: TestableObservable<Int> = scheduler.createHotObservable([
            completed(210)
        ])
        
        let e1: TestableObservable<Int> = scheduler.createHotObservable([
            completed(220)
        ])
        
        let e2: TestableObservable<Int> = scheduler.createHotObservable([
            completed(230)
        ])
        
        let e3: TestableObservable<Int> = scheduler.createHotObservable([
            completed(240)
        ])
        
        let e4: TestableObservable<Int> = scheduler.createHotObservable([
            completed(250)
        ])
        
        let e5: TestableObservable<Int> = scheduler.createHotObservable([
            completed(260)
        ])
        

        let res = scheduler.start { () -> Observable<Int> in
            let result: Observable<Int> = Observable.zip(e0, e1, e2, e3, e4, e5) { (_, _, _, _, _, _) -> Int in
                return (42)
            }

            return result
        }

        XCTAssertEqual(res.events, [
            completed(260)
        ])


        XCTAssertEqual(e0.subscriptions, [Subscription(200, 210)])
        XCTAssertEqual(e1.subscriptions, [Subscription(200, 220)])
        XCTAssertEqual(e2.subscriptions, [Subscription(200, 230)])
        XCTAssertEqual(e3.subscriptions, [Subscription(200, 240)])
        XCTAssertEqual(e4.subscriptions, [Subscription(200, 250)])
        XCTAssertEqual(e5.subscriptions, [Subscription(200, 260)])
    }

    func testZip_SymmetricReturn6() {
        let scheduler = TestScheduler(initialClock: 0)

        
        let e0: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
            next(210, 1),
            completed(400)
        ])
        
        let e1: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
            next(220, 2),
            completed(400)
        ])
        
        let e2: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
            next(230, 3),
            completed(400)
        ])
        
        let e3: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
            next(240, 4),
            completed(400)
        ])
        
        let e4: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
            next(250, 5),
            completed(400)
        ])
        
        let e5: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
            next(260, 6),
            completed(400)
        ])
        

        let res = scheduler.start { () -> Observable<Int> in
            let result: Observable<Int> = Observable.zip(e0, e1, e2, e3, e4, e5) { (_0, _1, _2, _3, _4, _5) -> Int in
                return (_0 + _1 + _2 + _3 + _4 + _5)
            }

            return result
        }

        XCTAssertEqual(res.events, [
            next(260, 21),
            completed(400)
        ])


        XCTAssertEqual(e0.subscriptions, [Subscription(200, 400)])
        XCTAssertEqual(e1.subscriptions, [Subscription(200, 400)])
        XCTAssertEqual(e2.subscriptions, [Subscription(200, 400)])
        XCTAssertEqual(e3.subscriptions, [Subscription(200, 400)])
        XCTAssertEqual(e4.subscriptions, [Subscription(200, 400)])
        XCTAssertEqual(e5.subscriptions, [Subscription(200, 400)])
    }

    func testZip_AllCompleted6() {
        let scheduler = TestScheduler(initialClock: 0)

        
        let e0: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
 
            next(210, 5),
            completed(220)
        ])
        
        let e1: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
 
            next(210, 5), 
            next(220, 6),
            completed(230)
        ])
        
        let e2: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
 
            next(210, 5), 
            next(220, 6), 
            next(230, 7),
            completed(240)
        ])
        
        let e3: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
 
            next(210, 5), 
            next(220, 6), 
            next(230, 7), 
            next(240, 8),
            completed(250)
        ])
        
        let e4: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
 
            next(210, 5), 
            next(220, 6), 
            next(230, 7), 
            next(240, 8), 
            next(250, 9),
            completed(260)
        ])
        
        let e5: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
 
            next(210, 5), 
            next(220, 6), 
            next(230, 7), 
            next(240, 8), 
            next(250, 9), 
            next(260, 10),
            completed(270)
        ])
        

        let res = scheduler.start { () -> Observable<Int> in
            let result: Observable<Int> = Observable.zip(e0, e1, e2, e3, e4, e5) { (_0, _1, _2, _3, _4, _5) -> Int in
                return (_0 + _1 + _2 + _3 + _4 + _5)
            }

            return result
        }

        XCTAssertEqual(res.events, [
            next(210, 30),
            completed(260)
        ])


        XCTAssertEqual(e0.subscriptions, [Subscription(200, 220)])
        XCTAssertEqual(e1.subscriptions, [Subscription(200, 230)])
        XCTAssertEqual(e2.subscriptions, [Subscription(200, 240)])
        XCTAssertEqual(e3.subscriptions, [Subscription(200, 250)])
        XCTAssertEqual(e4.subscriptions, [Subscription(200, 260)])
        XCTAssertEqual(e5.subscriptions, [Subscription(200, 260)])
    }



    

    // 7

    func testZip_ImmediateSchedule7() {
        
        let v0: Observable<Int> = Observable.just(1)
        let v1: Observable<Int> = Observable.just(2)
        let v2: Observable<Int> = Observable.just(3)
        let v3: Observable<Int> = Observable.just(4)
        let v4: Observable<Int> = Observable.just(5)
        let v5: Observable<Int> = Observable.just(6)
        let v6: Observable<Int> = Observable.just(7)

        var result: Int! = nil

        let _ = Observable.zip(v0, v1, v2, v3, v4, v5, v6) { (a0: Int, a1: Int, a2: Int, a3: Int, a4: Int, a5: Int, a6: Int) -> Int in a0 + a1 + a2 + a3 + a4 + a5 + a6 }
            .subscribeNext { (x: Int) -> Void in result = x }

        XCTAssertEqual(result, 28)
    }

    func testZip_Never7() {
        let scheduler = TestScheduler(initialClock: 0)

        
        let e0 = scheduler.createHotObservable([
            next(150, 1)
        ])
        
        let e1 = scheduler.createHotObservable([
            next(150, 1)
        ])
        
        let e2 = scheduler.createHotObservable([
            next(150, 1)
        ])
        
        let e3 = scheduler.createHotObservable([
            next(150, 1)
        ])
        
        let e4 = scheduler.createHotObservable([
            next(150, 1)
        ])
        
        let e5 = scheduler.createHotObservable([
            next(150, 1)
        ])
        
        let e6 = scheduler.createHotObservable([
            next(150, 1)
        ])
        

        let res = scheduler.start { () -> Observable<Int> in
            let result: Observable<Int> = Observable.zip(e0, e1, e2, e3, e4, e5, e6) { (_, _, _, _, _, _, _) -> Int in
                return (42)
            }

            return result
        }

        XCTAssertEqual(res.events, [])

        let subscriptions = [Subscription(200, 1000)]


        XCTAssertEqual(e0.subscriptions, subscriptions)
        XCTAssertEqual(e1.subscriptions, subscriptions)
        XCTAssertEqual(e2.subscriptions, subscriptions)
        XCTAssertEqual(e3.subscriptions, subscriptions)
        XCTAssertEqual(e4.subscriptions, subscriptions)
        XCTAssertEqual(e5.subscriptions, subscriptions)
        XCTAssertEqual(e6.subscriptions, subscriptions)
    }

    func testZip_Empty7() {
        let scheduler = TestScheduler(initialClock: 0)

        
        let e0: TestableObservable<Int> = scheduler.createHotObservable([
            completed(210)
        ])
        
        let e1: TestableObservable<Int> = scheduler.createHotObservable([
            completed(220)
        ])
        
        let e2: TestableObservable<Int> = scheduler.createHotObservable([
            completed(230)
        ])
        
        let e3: TestableObservable<Int> = scheduler.createHotObservable([
            completed(240)
        ])
        
        let e4: TestableObservable<Int> = scheduler.createHotObservable([
            completed(250)
        ])
        
        let e5: TestableObservable<Int> = scheduler.createHotObservable([
            completed(260)
        ])
        
        let e6: TestableObservable<Int> = scheduler.createHotObservable([
            completed(270)
        ])
        

        let res = scheduler.start { () -> Observable<Int> in
            let result: Observable<Int> = Observable.zip(e0, e1, e2, e3, e4, e5, e6) { (_, _, _, _, _, _, _) -> Int in
                return (42)
            }

            return result
        }

        XCTAssertEqual(res.events, [
            completed(270)
        ])


        XCTAssertEqual(e0.subscriptions, [Subscription(200, 210)])
        XCTAssertEqual(e1.subscriptions, [Subscription(200, 220)])
        XCTAssertEqual(e2.subscriptions, [Subscription(200, 230)])
        XCTAssertEqual(e3.subscriptions, [Subscription(200, 240)])
        XCTAssertEqual(e4.subscriptions, [Subscription(200, 250)])
        XCTAssertEqual(e5.subscriptions, [Subscription(200, 260)])
        XCTAssertEqual(e6.subscriptions, [Subscription(200, 270)])
    }

    func testZip_SymmetricReturn7() {
        let scheduler = TestScheduler(initialClock: 0)

        
        let e0: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
            next(210, 1),
            completed(400)
        ])
        
        let e1: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
            next(220, 2),
            completed(400)
        ])
        
        let e2: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
            next(230, 3),
            completed(400)
        ])
        
        let e3: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
            next(240, 4),
            completed(400)
        ])
        
        let e4: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
            next(250, 5),
            completed(400)
        ])
        
        let e5: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
            next(260, 6),
            completed(400)
        ])
        
        let e6: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
            next(270, 7),
            completed(400)
        ])
        

        let res = scheduler.start { () -> Observable<Int> in
            let result: Observable<Int> = Observable.zip(e0, e1, e2, e3, e4, e5, e6) { (_0, _1, _2, _3, _4, _5, _6) -> Int in
                return (_0 + _1 + _2 + _3 + _4 + _5 + _6)
            }

            return result
        }

        XCTAssertEqual(res.events, [
            next(270, 28),
            completed(400)
        ])


        XCTAssertEqual(e0.subscriptions, [Subscription(200, 400)])
        XCTAssertEqual(e1.subscriptions, [Subscription(200, 400)])
        XCTAssertEqual(e2.subscriptions, [Subscription(200, 400)])
        XCTAssertEqual(e3.subscriptions, [Subscription(200, 400)])
        XCTAssertEqual(e4.subscriptions, [Subscription(200, 400)])
        XCTAssertEqual(e5.subscriptions, [Subscription(200, 400)])
        XCTAssertEqual(e6.subscriptions, [Subscription(200, 400)])
    }

    func testZip_AllCompleted7() {
        let scheduler = TestScheduler(initialClock: 0)

        
        let e0: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
 
            next(210, 5),
            completed(220)
        ])
        
        let e1: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
 
            next(210, 5), 
            next(220, 6),
            completed(230)
        ])
        
        let e2: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
 
            next(210, 5), 
            next(220, 6), 
            next(230, 7),
            completed(240)
        ])
        
        let e3: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
 
            next(210, 5), 
            next(220, 6), 
            next(230, 7), 
            next(240, 8),
            completed(250)
        ])
        
        let e4: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
 
            next(210, 5), 
            next(220, 6), 
            next(230, 7), 
            next(240, 8), 
            next(250, 9),
            completed(260)
        ])
        
        let e5: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
 
            next(210, 5), 
            next(220, 6), 
            next(230, 7), 
            next(240, 8), 
            next(250, 9), 
            next(260, 10),
            completed(270)
        ])
        
        let e6: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
 
            next(210, 5), 
            next(220, 6), 
            next(230, 7), 
            next(240, 8), 
            next(250, 9), 
            next(260, 10), 
            next(270, 11),
            completed(280)
        ])
        

        let res = scheduler.start { () -> Observable<Int> in
            let result: Observable<Int> = Observable.zip(e0, e1, e2, e3, e4, e5, e6) { (_0, _1, _2, _3, _4, _5, _6) -> Int in
                return (_0 + _1 + _2 + _3 + _4 + _5 + _6)
            }

            return result
        }

        XCTAssertEqual(res.events, [
            next(210, 35),
            completed(270)
        ])


        XCTAssertEqual(e0.subscriptions, [Subscription(200, 220)])
        XCTAssertEqual(e1.subscriptions, [Subscription(200, 230)])
        XCTAssertEqual(e2.subscriptions, [Subscription(200, 240)])
        XCTAssertEqual(e3.subscriptions, [Subscription(200, 250)])
        XCTAssertEqual(e4.subscriptions, [Subscription(200, 260)])
        XCTAssertEqual(e5.subscriptions, [Subscription(200, 270)])
        XCTAssertEqual(e6.subscriptions, [Subscription(200, 270)])
    }



    

    // 8

    func testZip_ImmediateSchedule8() {
        
        let v0: Observable<Int> = Observable.just(1)
        let v1: Observable<Int> = Observable.just(2)
        let v2: Observable<Int> = Observable.just(3)
        let v3: Observable<Int> = Observable.just(4)
        let v4: Observable<Int> = Observable.just(5)
        let v5: Observable<Int> = Observable.just(6)
        let v6: Observable<Int> = Observable.just(7)
        let v7: Observable<Int> = Observable.just(8)

        var result: Int! = nil

        let _ = Observable.zip(v0, v1, v2, v3, v4, v5, v6, v7) { (a0: Int, a1: Int, a2: Int, a3: Int, a4: Int, a5: Int, a6: Int, a7: Int) -> Int in a0 + a1 + a2 + a3 + a4 + a5 + a6 + a7 }
            .subscribeNext { (x: Int) -> Void in result = x }

        XCTAssertEqual(result, 36)
    }

    func testZip_Never8() {
        let scheduler = TestScheduler(initialClock: 0)

        
        let e0 = scheduler.createHotObservable([
            next(150, 1)
        ])
        
        let e1 = scheduler.createHotObservable([
            next(150, 1)
        ])
        
        let e2 = scheduler.createHotObservable([
            next(150, 1)
        ])
        
        let e3 = scheduler.createHotObservable([
            next(150, 1)
        ])
        
        let e4 = scheduler.createHotObservable([
            next(150, 1)
        ])
        
        let e5 = scheduler.createHotObservable([
            next(150, 1)
        ])
        
        let e6 = scheduler.createHotObservable([
            next(150, 1)
        ])
        
        let e7 = scheduler.createHotObservable([
            next(150, 1)
        ])
        

        let res = scheduler.start { () -> Observable<Int> in
            let result: Observable<Int> = Observable.zip(e0, e1, e2, e3, e4, e5, e6, e7) { (_, _, _, _, _, _, _, _) -> Int in
                return (42)
            }

            return result
        }

        XCTAssertEqual(res.events, [])

        let subscriptions = [Subscription(200, 1000)]


        XCTAssertEqual(e0.subscriptions, subscriptions)
        XCTAssertEqual(e1.subscriptions, subscriptions)
        XCTAssertEqual(e2.subscriptions, subscriptions)
        XCTAssertEqual(e3.subscriptions, subscriptions)
        XCTAssertEqual(e4.subscriptions, subscriptions)
        XCTAssertEqual(e5.subscriptions, subscriptions)
        XCTAssertEqual(e6.subscriptions, subscriptions)
        XCTAssertEqual(e7.subscriptions, subscriptions)
    }

    func testZip_Empty8() {
        let scheduler = TestScheduler(initialClock: 0)

        
        let e0: TestableObservable<Int> = scheduler.createHotObservable([
            completed(210)
        ])
        
        let e1: TestableObservable<Int> = scheduler.createHotObservable([
            completed(220)
        ])
        
        let e2: TestableObservable<Int> = scheduler.createHotObservable([
            completed(230)
        ])
        
        let e3: TestableObservable<Int> = scheduler.createHotObservable([
            completed(240)
        ])
        
        let e4: TestableObservable<Int> = scheduler.createHotObservable([
            completed(250)
        ])
        
        let e5: TestableObservable<Int> = scheduler.createHotObservable([
            completed(260)
        ])
        
        let e6: TestableObservable<Int> = scheduler.createHotObservable([
            completed(270)
        ])
        
        let e7: TestableObservable<Int> = scheduler.createHotObservable([
            completed(280)
        ])
        

        let res = scheduler.start { () -> Observable<Int> in
            let result: Observable<Int> = Observable.zip(e0, e1, e2, e3, e4, e5, e6, e7) { (_, _, _, _, _, _, _, _) -> Int in
                return (42)
            }

            return result
        }

        XCTAssertEqual(res.events, [
            completed(280)
        ])


        XCTAssertEqual(e0.subscriptions, [Subscription(200, 210)])
        XCTAssertEqual(e1.subscriptions, [Subscription(200, 220)])
        XCTAssertEqual(e2.subscriptions, [Subscription(200, 230)])
        XCTAssertEqual(e3.subscriptions, [Subscription(200, 240)])
        XCTAssertEqual(e4.subscriptions, [Subscription(200, 250)])
        XCTAssertEqual(e5.subscriptions, [Subscription(200, 260)])
        XCTAssertEqual(e6.subscriptions, [Subscription(200, 270)])
        XCTAssertEqual(e7.subscriptions, [Subscription(200, 280)])
    }

    func testZip_SymmetricReturn8() {
        let scheduler = TestScheduler(initialClock: 0)

        
        let e0: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
            next(210, 1),
            completed(400)
        ])
        
        let e1: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
            next(220, 2),
            completed(400)
        ])
        
        let e2: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
            next(230, 3),
            completed(400)
        ])
        
        let e3: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
            next(240, 4),
            completed(400)
        ])
        
        let e4: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
            next(250, 5),
            completed(400)
        ])
        
        let e5: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
            next(260, 6),
            completed(400)
        ])
        
        let e6: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
            next(270, 7),
            completed(400)
        ])
        
        let e7: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
            next(280, 8),
            completed(400)
        ])
        

        let res = scheduler.start { () -> Observable<Int> in
            let result: Observable<Int> = Observable.zip(e0, e1, e2, e3, e4, e5, e6, e7) { (_0, _1, _2, _3, _4, _5, _6, _7) -> Int in
                return (_0 + _1 + _2 + _3 + _4 + _5 + _6 + _7)
            }

            return result
        }

        XCTAssertEqual(res.events, [
            next(280, 36),
            completed(400)
        ])


        XCTAssertEqual(e0.subscriptions, [Subscription(200, 400)])
        XCTAssertEqual(e1.subscriptions, [Subscription(200, 400)])
        XCTAssertEqual(e2.subscriptions, [Subscription(200, 400)])
        XCTAssertEqual(e3.subscriptions, [Subscription(200, 400)])
        XCTAssertEqual(e4.subscriptions, [Subscription(200, 400)])
        XCTAssertEqual(e5.subscriptions, [Subscription(200, 400)])
        XCTAssertEqual(e6.subscriptions, [Subscription(200, 400)])
        XCTAssertEqual(e7.subscriptions, [Subscription(200, 400)])
    }

    func testZip_AllCompleted8() {
        let scheduler = TestScheduler(initialClock: 0)

        
        let e0: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
 
            next(210, 5),
            completed(220)
        ])
        
        let e1: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
 
            next(210, 5), 
            next(220, 6),
            completed(230)
        ])
        
        let e2: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
 
            next(210, 5), 
            next(220, 6), 
            next(230, 7),
            completed(240)
        ])
        
        let e3: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
 
            next(210, 5), 
            next(220, 6), 
            next(230, 7), 
            next(240, 8),
            completed(250)
        ])
        
        let e4: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
 
            next(210, 5), 
            next(220, 6), 
            next(230, 7), 
            next(240, 8), 
            next(250, 9),
            completed(260)
        ])
        
        let e5: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
 
            next(210, 5), 
            next(220, 6), 
            next(230, 7), 
            next(240, 8), 
            next(250, 9), 
            next(260, 10),
            completed(270)
        ])
        
        let e6: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
 
            next(210, 5), 
            next(220, 6), 
            next(230, 7), 
            next(240, 8), 
            next(250, 9), 
            next(260, 10), 
            next(270, 11),
            completed(280)
        ])
        
        let e7: TestableObservable<Int> = scheduler.createHotObservable([
            next(150, 1),
 
            next(210, 5), 
            next(220, 6), 
            next(230, 7), 
            next(240, 8), 
            next(250, 9), 
            next(260, 10), 
            next(270, 11), 
            next(280, 12),
            completed(290)
        ])
        

        let res = scheduler.start { () -> Observable<Int> in
            let result: Observable<Int> = Observable.zip(e0, e1, e2, e3, e4, e5, e6, e7) { (_0, _1, _2, _3, _4, _5, _6, _7) -> Int in
                return (_0 + _1 + _2 + _3 + _4 + _5 + _6 + _7)
            }

            return result
        }

        XCTAssertEqual(res.events, [
            next(210, 40),
            completed(280)
        ])


        XCTAssertEqual(e0.subscriptions, [Subscription(200, 220)])
        XCTAssertEqual(e1.subscriptions, [Subscription(200, 230)])
        XCTAssertEqual(e2.subscriptions, [Subscription(200, 240)])
        XCTAssertEqual(e3.subscriptions, [Subscription(200, 250)])
        XCTAssertEqual(e4.subscriptions, [Subscription(200, 260)])
        XCTAssertEqual(e5.subscriptions, [Subscription(200, 270)])
        XCTAssertEqual(e6.subscriptions, [Subscription(200, 280)])
        XCTAssertEqual(e7.subscriptions, [Subscription(200, 280)])
    }



    


    func testZip_NeverEmpty() {
        let scheduler = TestScheduler(initialClock: 0)

        let n = scheduler.createHotObservable([
            next(150, 1)
        ])

        let e = scheduler.createHotObservable([
            next(150, 1),
            completed(210)
        ])

        let res = scheduler.start {
            Observable.zip(n, e) { $0 + $1 }
        }

        XCTAssertEqual(res.events, [])

        XCTAssertEqual(n.subscriptions, [
            Subscription(200, 1000)
        ])

        XCTAssertEqual(e.subscriptions, [
            Subscription(200, 210)
        ])
    }

    func testZip_EmptyNever() {
        let scheduler = TestScheduler(initialClock: 0)

        let n = scheduler.createHotObservable([
            next(150, 1)
        ])

        let e = scheduler.createHotObservable([
            next(150, 1),
            completed(210)
        ])

        let res = scheduler.start {
            Observable.zip(e, n) { $0 + $1 }
        }

        XCTAssertEqual(res.events, [])

        XCTAssertEqual(n.subscriptions, [
            Subscription(200, 1000)
        ])

        XCTAssertEqual(e.subscriptions, [
            Subscription(200, 210)
        ])
    }

    func testZip_EmptyNonEmpty() {
        let scheduler = TestScheduler(initialClock: 0)

        let e = scheduler.createHotObservable([
            next(150, 1),
            completed(210)
        ])

        let o = scheduler.createHotObservable([
            next(150, 1),
            next(215, 2),
            completed(220)
        ])

        let res = scheduler.start {
            Observable.zip(e, o) { $0 + $1 }
        }
   
        let messages = [
            completed(215, Int.self)
        ]
        XCTAssertEqual(res.events, messages)

        XCTAssertEqual(e.subscriptions, [
            Subscription(200, 210)
        ])

        XCTAssertEqual(o.subscriptions, [
            Subscription(200, 215)
        ])
    }

    func testZip_NonEmptyEmpty() {
        let scheduler = TestScheduler(initialClock: 0)

        let e = scheduler.createHotObservable([
            next(150, 1),
            completed(210)
        ])

        let o = scheduler.createHotObservable([
            next(150, 1),
            next(215, 2),
            completed(220)
        ])

        let res = scheduler.start {
            Observable.zip(o, e) { $0 + $1 }
        }
   
        let messages = [
            completed(215, Int.self)
        ]
        XCTAssertEqual(res.events, messages)

        XCTAssertEqual(e.subscriptions, [
            Subscription(200, 210)
        ])

        XCTAssertEqual(o.subscriptions, [
            Subscription(200, 215)
        ])
    }

    func testZip_NeverNonEmpty() {
        let scheduler = TestScheduler(initialClock: 0)

        let n = scheduler.createHotObservable([
            next(150, 1),
        ])

        let o = scheduler.createHotObservable([
            next(150, 1),
            next(215, 2),
            completed(220)
        ])

        let res = scheduler.start {
            Observable.zip(n, o) { $0 + $1 }
        }
   
        let messages: [Recorded<Event<Int>>] = []
        XCTAssertEqual(res.events, messages)

        XCTAssertEqual(o.subscriptions, [
            Subscription(200, 220)
        ])

        XCTAssertEqual(n.subscriptions, [
            Subscription(200, 1000)
        ])
    }

    func testZip_NonEmptyNever() {
        let scheduler = TestScheduler(initialClock: 0)

        let n = scheduler.createHotObservable([
            next(150, 1),
        ])

        let o = scheduler.createHotObservable([
            next(150, 1),
            next(215, 2),
            completed(220)
        ])

        let res = scheduler.start {
            Observable.zip(o, n) { $0 + $1 }
        }
   
        let messages: [Recorded<Event<Int>>] = []
        XCTAssertEqual(res.events, messages)

        XCTAssertEqual(o.subscriptions, [
            Subscription(200, 220)
        ])

        XCTAssertEqual(n.subscriptions, [
            Subscription(200, 1000)
        ])
    }

    func testZip_NonEmptyNonEmpty() {
        let scheduler = TestScheduler(initialClock: 0)

        let o1 = scheduler.createHotObservable([
            next(150, 1),
            next(215, 2),
            completed(230)
        ])

        let o2 = scheduler.createHotObservable([
            next(150, 1),
            next(220, 3),
            completed(240)
        ])

        let res = scheduler.start {
            Observable.zip(o1, o2) { $0 + $1 }
        }
   
        let messages = [
            next(220, 2 + 3),
            completed(240)
        ]

        XCTAssertEqual(res.events, messages)

        XCTAssertEqual(o1.subscriptions, [
            Subscription(200, 230)
        ])

        XCTAssertEqual(o2.subscriptions, [
            Subscription(200, 240)
        ])
    }

    func testZip_EmptyError() {
        let scheduler = TestScheduler(initialClock: 0)

        let o1 = scheduler.createHotObservable([
            next(150, 1),
            completed(230)
        ])

        let o2 = scheduler.createHotObservable([
            next(150, 1),
            error(220, testError)
        ])

        let res = scheduler.start {
            Observable.zip(o1, o2) { $0 + $1 }
        }
   
        let messages = [
            error(220, testError, Int.self)
        ]

        XCTAssertEqual(res.events, messages)

        XCTAssertEqual(o1.subscriptions, [
            Subscription(200, 220)
        ])

        XCTAssertEqual(o2.subscriptions, [
            Subscription(200, 220)
        ])
    }

    func testZip_ErrorEmpty() {
        let scheduler = TestScheduler(initialClock: 0)

        let o1 = scheduler.createHotObservable([
            next(150, 1),
            completed(230)
        ])

        let o2 = scheduler.createHotObservable([
            next(150, 1),
            error(220, testError)
        ])

        let res = scheduler.start {
            Observable.zip(o2, o1) { $0 + $1 }
        }
   
        let messages = [
            error(220, testError, Int.self)
        ]

        XCTAssertEqual(res.events, messages)

        XCTAssertEqual(o1.subscriptions, [
            Subscription(200, 220)
        ])

        XCTAssertEqual(o2.subscriptions, [
            Subscription(200, 220)
        ])
    }

    func testZip_NeverError() {
        let scheduler = TestScheduler(initialClock: 0)

        let o1 = scheduler.createHotObservable([
            next(150, 1),
        ])

        let o2 = scheduler.createHotObservable([
            next(150, 1),
            error(220, testError)
        ])

        let res = scheduler.start {
            Observable.zip(o1, o2) { $0 + $1 }
        }
   
        let messages = [
            error(220, testError, Int.self)
        ]

        XCTAssertEqual(res.events, messages)

        XCTAssertEqual(o1.subscriptions, [
            Subscription(200, 220)
        ])

        XCTAssertEqual(o2.subscriptions, [
            Subscription(200, 220)
        ])
    }

    func testZip_ErrorNever() {
        let scheduler = TestScheduler(initialClock: 0)

        let o1 = scheduler.createHotObservable([
            next(150, 1),
        ])

        let o2 = scheduler.createHotObservable([
            next(150, 1),
            error(220, testError)
        ])

        let res = scheduler.start {
            Observable.zip(o2, o1) { $0 + $1 }
        }
   
        let messages = [
            error(220, testError, Int.self)
        ]

        XCTAssertEqual(res.events, messages)

        XCTAssertEqual(o1.subscriptions, [
            Subscription(200, 220)
        ])

        XCTAssertEqual(o2.subscriptions, [
            Subscription(200, 220)
        ])
    }

    func testZip_ErrorError() {
        let scheduler = TestScheduler(initialClock: 0)

        let o1 = scheduler.createHotObservable([
            next(150, 1),
            error(230, testError1)
        ])

        let o2 = scheduler.createHotObservable([
            next(150, 1),
            error(220, testError2)
        ])

        let res = scheduler.start {
            Observable.zip(o2, o1) { $0 + $1 }
        }
   
        let messages = [
            error(220, testError2, Int.self)
        ]

        XCTAssertEqual(res.events, messages)

        XCTAssertEqual(o1.subscriptions, [
            Subscription(200, 220)
        ])

        XCTAssertEqual(o2.subscriptions, [
            Subscription(200, 220)
        ])
    }

    func testZip_SomeError() {
        let scheduler = TestScheduler(initialClock: 0)

        let o1 = scheduler.createHotObservable([
            next(150, 1),
            next(215, 2),
            completed(230)
        ])

        let o2 = scheduler.createHotObservable([
            next(150, 1),
            error(220, testError1)
        ])

        let res = scheduler.start {
            Observable.zip(o1, o2) { $0 + $1 }
        }
   
        let messages = [
            error(220, testError1, Int.self)
        ]

        XCTAssertEqual(res.events, messages)

        XCTAssertEqual(o1.subscriptions, [
            Subscription(200, 220)
        ])

        XCTAssertEqual(o2.subscriptions, [
            Subscription(200, 220)
        ])
    }

    func testZip_ErrorSome() {
        let scheduler = TestScheduler(initialClock: 0)

        let o1 = scheduler.createHotObservable([
            next(150, 1),
            next(215, 2),
            completed(230)
        ])

        let o2 = scheduler.createHotObservable([
            next(150, 1),
            error(220, testError1)
        ])

        let res = scheduler.start {
            Observable.zip(o2, o1) { $0 + $1 }
        }
   
        let messages = [
            error(220, testError1, Int.self)
        ]

        XCTAssertEqual(res.events, messages)

        XCTAssertEqual(o1.subscriptions, [
            Subscription(200, 220)
        ])

        XCTAssertEqual(o2.subscriptions, [
            Subscription(200, 220)
        ])
    }

    func testZip_LeftCompletesFirst() {
        let scheduler = TestScheduler(initialClock: 0)

        let o1 = scheduler.createHotObservable([
            next(150, 1),
            next(210, 2),
            completed(220)
        ])

        let o2 = scheduler.createHotObservable([
            next(150, 1),
            next(215, 4),
            completed(225)
        ])

        let res = scheduler.start {
            Observable.zip(o1, o2) { $0 + $1 }
        }
   
        let messages = [
            next(215, 2 + 4),
            completed(225)
        ]

        XCTAssertEqual(res.events, messages)

        XCTAssertEqual(o1.subscriptions, [
            Subscription(200, 220)
        ])

        XCTAssertEqual(o2.subscriptions, [
            Subscription(200, 225)
        ])
    }

    func testZip_RightCompletesFirst() {
        let scheduler = TestScheduler(initialClock: 0)

        let o1 = scheduler.createHotObservable([
            next(150, 1),
            next(210, 2),
            completed(220)
        ])

        let o2 = scheduler.createHotObservable([
            next(150, 1),
            next(215, 4),
            completed(225)
        ])

        let res = scheduler.start {
            Observable.zip(o2, o1) { $0 + $1 }
        }
   
        let messages = [
            next(215, 2 + 4),
            completed(225)
        ]

        XCTAssertEqual(res.events, messages)

        XCTAssertEqual(o1.subscriptions, [
            Subscription(200, 220)
        ])

        XCTAssertEqual(o2.subscriptions, [
            Subscription(200, 225)
        ])
    }

    func testZip_LeftTriggersSelectorError() {
        let scheduler = TestScheduler(initialClock: 0)

        let o1 = scheduler.createHotObservable([
            next(150, 1),
            next(220, 2),
            completed(220)
        ])

        let o2 = scheduler.createHotObservable([
            next(150, 1),
            next(210, 4),
        ])

        let res = scheduler.start {
            Observable.zip(o1, o2) { (_, _) throws -> Int in throw testError }
        }
   
        let messages = [
            error(220, testError, Int.self)
        ]

        XCTAssertEqual(res.events, messages)

        XCTAssertEqual(o1.subscriptions, [
            Subscription(200, 220)
        ])

        XCTAssertEqual(o2.subscriptions, [
            Subscription(200, 220)
        ])
    }

    func testZip_RightTriggersSelectorError() {
        let scheduler = TestScheduler(initialClock: 0)

        let o1 = scheduler.createHotObservable([
            next(150, 1),
            next(220, 2),
            completed(220)
        ])

        let o2 = scheduler.createHotObservable([
            next(150, 1),
            next(210, 4),
        ])

        let res = scheduler.start {
            Observable.zip(o2, o1) { (_, _) throws -> Int in throw testError }
        }
   
        let messages = [
            error(220, testError, Int.self)
        ]

        XCTAssertEqual(res.events, messages)

        XCTAssertEqual(o1.subscriptions, [
            Subscription(200, 220)
        ])

        XCTAssertEqual(o2.subscriptions, [
            Subscription(200, 220)
        ])
    }







}
